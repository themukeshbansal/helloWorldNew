package com.dailyhunt.controller;


import java.util.concurrent.atomic.AtomicLong;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.dailyhunt.model.Greeting;
import com.dailyhunt.model.User;
import com.dailyhunt.repository.UserRepository;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();
    
    @GetMapping("/")//TODO check expression to return all results if there is no default value present.
    //Something like if empty find all otherwise find the one that is mentioned
    public String display(@RequestParam(value="name", required=false, defaultValue="Amit Chaudhary") String name,Model model) {
//    	model.addAttribute("users",userRepository.findAll());
    	model.addAttribute("users",userRepository.findByName(name));
        return "display";
    }
    
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String clientId) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User n = new User();
		n.setName(name);
		n.setClientId(clientId);
		userRepository.save(n);
		return "Saved";
	}
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
    @RequestMapping("/webGreeting")
    public String webGreeting(@RequestParam(value="name", required=false, defaultValue="World") String name, Model model) {
        model.addAttribute("name", name);
        return "index";
    }
    @RequestMapping("/jsonGreeting")
    @ResponseBody //helps in returning response in json body instead of a view.
    public Greeting jsonGreeting(@RequestParam(value="name", defaultValue="World") String name) {
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }
    @PostMapping("/getName")//TODO response body change to json object for the api to work
    public @ResponseBody Greeting getName(@RequestParam String name) {
    	return new Greeting(counter.incrementAndGet(),
                String.format(template, name));
    }
    
    
}